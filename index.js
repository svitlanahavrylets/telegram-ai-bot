import axios from "axios";
import dotenv from "dotenv";
import dayjs from "dayjs";
import { Telegraf, session, Markup } from "telegraf";
import systemPrompt from "./prompt.js";

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

bot.use(session());

function isWorkingHours() {
  const now = dayjs();
  const hour = now.hour();
  return hour >= 10 && hour < 18;
}

async function getWorkingStatus() {
  try {
    const response = await axios.get(
      "https://hook.eu2.make.com/5s4seh193zi2jw95lht18hrxggipbp4r"
    );

    const data = response.data;
    const manualOverride = data.manualOverride === "true";
    const isOpen = data.isOpen === "true";

    if (manualOverride) return true; // –†—É—á–Ω–∏–π —Ä–µ–∂–∏–º –≤–º–∏–∫–∞—î —Ä–æ–±–æ—Ç—É
    return isOpen; // –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º
  } catch (err) {
    console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫:", err);
    return true; // fallback: –∫—Ä–∞—â–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –Ω—ñ–∂ –º–æ–≤—á–∞—Ç–∏
  }
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö —É Google –¢–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ Webhook Make
async function sendDataToGoogleSheets(data) {
  try {
    await axios.post(
      "https://hook.eu2.make.com/08ktt9547kxpdk4lng9rcd4bdmbtmahg", // –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Webhook Make
      data
    );
    console.log("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ:", data);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—é:", error);
  }
}

// –°—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
  ctx.session = { step: 1, data: {} };
  await ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –º–∞–π—Å—Ç—Ä–∞ –∑ —Ä–µ–º–æ–Ω—Ç—É –Ω–æ—É—Ç–±—É–∫—ñ–≤. –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?"
  );
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on("text", async (ctx) => {
  const text = ctx.message.text;
  const session = ctx.session;

  switch (session?.step) {
    case 1:
      session.data.name = text;
      session.step = 2;
      await ctx.reply("–î—è–∫—É—é! –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –º–æ–¥–µ–ª—å –Ω–æ—É—Ç–±—É–∫–∞.");
      break;

    case 2:
      session.data.model = text;
      session.step = 3;
      await ctx.reply("–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∞—à–æ–º—É –Ω–æ—É—Ç–±—É–∫—É?");
      break;

    case 3:
      session.data.age = text;
      session.step = 4;
      await ctx.reply("–Ø–∫–∞ —Å–∞–º–µ –ø—Ä–æ–±–ª–µ–º–∞ –∞–±–æ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?");
      break;

    case 4:
      session.data.problem = text;

      // AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å (–æ–ø—Ü—ñ–π–Ω–æ)
      const aiReply = await getAIResponse(
        `–ö–ª—ñ—î–Ω—Ç –æ–ø–∏—Å–∞–≤ –ø—Ä–æ–±–ª–µ–º—É: ${text}. –î–∞–π –∫–æ—Ä–æ—Ç–∫—É –¥—Ä—É–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.`
      );
      await ctx.reply(aiReply);

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ Make Webhook
      const workingStatus = await getWorkingStatus();

      if (workingStatus) {
        await ctx.reply(
          `–î—è–∫—É—é –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ú–∏ –∑–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î–º–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤—ñ—Ç–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏:\n` +
            `üìç –ö–∏—ó–≤, –≤—É–ª. –£—à–∏–Ω—Å—å–∫–æ–≥–æ, 4\n` +
            `üìû +380930000000`
        );

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Å—ñ—é
        await sendDataToGoogleSheets(session.data);
        ctx.session = null;

        // –í–∏–≤–æ–¥–∏–º–æ –º–µ–Ω—é –ø–æ—Å–ª—É–≥
        const servicesKeyboard = Markup.keyboard([
          ["üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"],
          ["üíª –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞"],
          ["üõí –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂ –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö"],
        ]).resize();

        await ctx.reply("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", servicesKeyboard);
      } else {
        // –Ø–∫—â–æ –Ω–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å ‚Äî –ø—Ä–æ—Å–∏–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        session.step = 5;
        await ctx.reply(
          "–ù–∞—Ä–∞–∑—ñ –º–∏ –Ω–µ –ø—Ä–∞—Ü—é—î–º–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ —É —Ä–æ–±–æ—á–∏–π —á–∞—Å."
        );
      }
      break;

    case 5:
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
      session.data.phone = text;
      await ctx.reply("–î—è–∫—É—é! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —É —Ä–æ–±–æ—á–∏–π —á–∞—Å.");

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ
      await sendDataToGoogleSheets(session.data);
      ctx.session = null;
      break;

    default:
      await ctx.reply("–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start.");
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥
bot.hears("üõ†Ô∏è –¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", async (ctx) => {
  const content = await getServiceContent("–¢–µ—Ö–Ω—ñ—á–Ω–µ_–æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è");
  await ctx.reply(content);
});

bot.hears("üíª –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", async (ctx) => {
  const content = await getServiceContent("–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞_—Å–∏—Å—Ç–µ–º–∞");
  await ctx.reply(content);
});

bot.hears("üõí –ö—É–ø—ñ–≤–ª—è / –ü—Ä–æ–¥–∞–∂ –Ω–æ—É—Ç–±—É–∫—ñ–≤ —Ç–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö", async (ctx) => {
  const content = await getServiceContent("–ö—É–ø—ñ–≤–ª—è_–ü—Ä–æ–¥–∞–∂");
  await ctx.reply(content);
});

console.log("Using model:", process.env.DEEPINFRA_MODEL);
console.log("Using API key:", process.env.DEEPINFRA_API_KEY ? "YES" : "NO");

// –í–∏–∫–ª–∏–∫ AI —á–µ—Ä–µ–∑ DeepInfra (–æ–ø—Ü—ñ–π–Ω–æ)
async function getAIResponse(userInput) {
  try {
    const response = await axios.post(
      "https://api.deepinfra.com/v1/inference/meta-llama/Meta-Llama-3-8B-Instruct", // –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ process.env –¥–ª—è –º–æ–¥–µ–ª—ñ
      {
        input: `<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\n${systemPrompt}<|eot_id|><|start_header_id|>user<|end_header_id|>\n\n${userInput}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n`,
        stop: ["<|eot_id|>"],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.DEEPINFRA_API_KEY}`, // –ê —Ç—É—Ç –∫–ª—é—á –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ –∑ .env
          "Content-Type": "application/json",
        },
      }
    );

    return (
      response.data.results?.[0]?.generated_text?.trim() ||
      "–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    );
  } catch (error) {
    console.error("DeepInfra error:", error.response?.data || error.message);
    return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI. –ê–ª–µ –º–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏!";
  }
}

bot.launch();
